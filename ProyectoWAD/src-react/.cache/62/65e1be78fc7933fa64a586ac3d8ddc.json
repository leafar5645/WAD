{"id":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","dependencies":[{"name":"C:\\Users\\Marcus\\Desktop\\WAD\\WAD\\ProyectoWAD\\src-react\\package.json","includedInParent":true,"mtime":1559071390840},{"name":"C:\\Users\\Marcus\\Desktop\\WAD\\WAD\\ProyectoWAD\\src-react\\.babelrc","includedInParent":true,"mtime":1558641273805},{"name":"C:\\Users\\Marcus\\Desktop\\WAD\\WAD\\ProyectoWAD\\src-react\\node_modules\\react-dnd\\package.json","includedInParent":true,"mtime":1559071370213},{"name":"react","loc":{"line":3,"column":22},"parent":"C:\\Users\\Marcus\\Desktop\\WAD\\WAD\\ProyectoWAD\\src-react\\node_modules\\react-dnd\\lib\\cjs\\wrapConnectorHooks.js","resolved":"C:\\Users\\Marcus\\Desktop\\WAD\\WAD\\ProyectoWAD\\src-react\\node_modules\\react\\index.js"},{"name":"./utils/cloneWithRef","loc":{"line":4,"column":29},"parent":"C:\\Users\\Marcus\\Desktop\\WAD\\WAD\\ProyectoWAD\\src-react\\node_modules\\react-dnd\\lib\\cjs\\wrapConnectorHooks.js","resolved":"C:\\Users\\Marcus\\Desktop\\WAD\\WAD\\ProyectoWAD\\src-react\\node_modules\\react-dnd\\lib\\cjs\\utils\\cloneWithRef.js"},{"name":"./utils/polyfills/endsWith","loc":{"line":5,"column":8},"parent":"C:\\Users\\Marcus\\Desktop\\WAD\\WAD\\ProyectoWAD\\src-react\\node_modules\\react-dnd\\lib\\cjs\\wrapConnectorHooks.js","resolved":"C:\\Users\\Marcus\\Desktop\\WAD\\WAD\\ProyectoWAD\\src-react\\node_modules\\react-dnd\\lib\\cjs\\utils\\polyfills\\endsWith.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar react_1 = require(\"react\");\nvar cloneWithRef_1 = require(\"./utils/cloneWithRef\");\nrequire(\"./utils/polyfills/endsWith\");\nfunction throwIfCompositeComponentElement(element) {\n    // Custom components can no longer be wrapped directly in React DnD 2.0\n    // so that we don't need to depend on findDOMNode() from react-dom.\n    if (typeof element.type === 'string') {\n        return;\n    }\n    var displayName = element.type.displayName || element.type.name || 'the component';\n    throw new Error('Only native element nodes can now be passed to React DnD connectors.' +\n        (\"You can either wrap \" + displayName + \" into a <div>, or turn it into a \") +\n        'drag source or a drop target itself.');\n}\nfunction wrapHookToRecognizeElement(hook) {\n    return function (elementOrNode, options) {\n        if (elementOrNode === void 0) { elementOrNode = null; }\n        if (options === void 0) { options = null; }\n        // When passed a node, call the hook straight away.\n        if (!react_1.isValidElement(elementOrNode)) {\n            var node = elementOrNode;\n            hook(node, options);\n            // return the node so it can be chained (e.g. when within callback refs\n            // <div ref={node => connectDragSource(connectDropTarget(node))}/>\n            return node;\n        }\n        // If passed a ReactElement, clone it and attach this function as a ref.\n        // This helps us achieve a neat API where user doesn't even know that refs\n        // are being used under the hood.\n        var element = elementOrNode;\n        throwIfCompositeComponentElement(element);\n        // When no options are passed, use the hook directly\n        var ref = options ? function (node) { return hook(node, options); } : hook;\n        return cloneWithRef_1.default(element, ref);\n    };\n}\nfunction wrapConnectorHooks(hooks) {\n    var wrappedHooks = {};\n    Object.keys(hooks).forEach(function (key) {\n        var hook = hooks[key];\n        // ref objects should be passed straight through without wrapping\n        if (key.endsWith('Ref')) {\n            wrappedHooks[key] = hooks[key];\n        }\n        else {\n            var wrappedHook_1 = wrapHookToRecognizeElement(hook);\n            wrappedHooks[key] = function () { return wrappedHook_1; };\n        }\n    });\n    return wrappedHooks;\n}\nexports.default = wrapConnectorHooks;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}}],"sources":{"../node_modules/react-dnd/lib/cjs/wrapConnectorHooks.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar react_1 = require(\"react\");\nvar cloneWithRef_1 = require(\"./utils/cloneWithRef\");\nrequire(\"./utils/polyfills/endsWith\");\nfunction throwIfCompositeComponentElement(element) {\n    // Custom components can no longer be wrapped directly in React DnD 2.0\n    // so that we don't need to depend on findDOMNode() from react-dom.\n    if (typeof element.type === 'string') {\n        return;\n    }\n    var displayName = element.type.displayName || element.type.name || 'the component';\n    throw new Error('Only native element nodes can now be passed to React DnD connectors.' +\n        (\"You can either wrap \" + displayName + \" into a <div>, or turn it into a \") +\n        'drag source or a drop target itself.');\n}\nfunction wrapHookToRecognizeElement(hook) {\n    return function (elementOrNode, options) {\n        if (elementOrNode === void 0) { elementOrNode = null; }\n        if (options === void 0) { options = null; }\n        // When passed a node, call the hook straight away.\n        if (!react_1.isValidElement(elementOrNode)) {\n            var node = elementOrNode;\n            hook(node, options);\n            // return the node so it can be chained (e.g. when within callback refs\n            // <div ref={node => connectDragSource(connectDropTarget(node))}/>\n            return node;\n        }\n        // If passed a ReactElement, clone it and attach this function as a ref.\n        // This helps us achieve a neat API where user doesn't even know that refs\n        // are being used under the hood.\n        var element = elementOrNode;\n        throwIfCompositeComponentElement(element);\n        // When no options are passed, use the hook directly\n        var ref = options ? function (node) { return hook(node, options); } : hook;\n        return cloneWithRef_1.default(element, ref);\n    };\n}\nfunction wrapConnectorHooks(hooks) {\n    var wrappedHooks = {};\n    Object.keys(hooks).forEach(function (key) {\n        var hook = hooks[key];\n        // ref objects should be passed straight through without wrapping\n        if (key.endsWith('Ref')) {\n            wrappedHooks[key] = hooks[key];\n        }\n        else {\n            var wrappedHook_1 = wrapHookToRecognizeElement(hook);\n            wrappedHooks[key] = function () { return wrappedHook_1; };\n        }\n    });\n    return wrappedHooks;\n}\nexports.default = wrapConnectorHooks;\n"},"lineCount":55}},"error":null,"hash":"a13437732dce1dceaeb6e1886540b845","cacheData":{"env":{}}}